#include "batch_norm_metax.h"
#include "../../../devices/metax/metax_common.h"
#include "../../../devices/metax/metax_kernel_common.h"
#include "../../../../utils.h"

namespace op::batch_norm::metax {

// 设备端数据类型转换函数
template<typename T>
__device__ float device_cast_to_float(T val);

template<>
__device__ float device_cast_to_float<fp16_t>(fp16_t val) {
    // Convert custom fp16_t to __half first, then to float
    __half h_val;
    memcpy(&h_val, &val, sizeof(__half));
    return __half2float(h_val);
}

template<>
__device__ float device_cast_to_float<bf16_t>(bf16_t val) {
    // Convert custom bf16_t to __hpcc_bfloat16 first, then to float
    __hpcc_bfloat16 bf_val;
    memcpy(&bf_val, &val, sizeof(__hpcc_bfloat16));
    return __bfloat162float(bf_val);
}

template<>
__device__ float device_cast_to_float<float>(float val) {
    return val;
}

template<typename T>
__device__ T device_cast_from_float(float val);

template<>
__device__ fp16_t device_cast_from_float<fp16_t>(float val) {
    // Convert float to __half first, then to custom fp16_t
    __half h_val = __float2half(val);
    fp16_t result;
    memcpy(&result, &h_val, sizeof(fp16_t));
    return result;
}

template<>
__device__ bf16_t device_cast_from_float<bf16_t>(float val) {
    // Convert float to __hpcc_bfloat16 first, then to custom bf16_t
    __hpcc_bfloat16 bf_val = __float2bfloat16(val);
    bf16_t result;
    memcpy(&result, &bf_val, sizeof(bf16_t));
    return result;
}

template<>
__device__ float device_cast_from_float<float>(float val) {
    return val;
}

// BatchNorm核函数
template<typename T>
__global__ void batchNormKernel(
    T *__restrict__ output,
    const T *__restrict__ input,
    const T *__restrict__ weight,
    const T *__restrict__ bias,
    T *__restrict__ running_mean,
    T *__restrict__ running_var,
    T *__restrict__ workspace_mean,
    T *__restrict__ workspace_var,
    size_t batch_size,
    size_t channels,
    size_t spatial_size,
    float momentum,
    float eps) {
    
    int channel_idx = blockIdx.x;
    int thread_idx = threadIdx.x;
    int block_size = blockDim.x;
    
    if (channel_idx >= channels) return;
    
    // 计算当前通道的均值
    float sum = 0.0f;
    size_t total_elements = batch_size * spatial_size;
    
    for (size_t i = thread_idx; i < total_elements; i += block_size) {
        size_t batch_idx = i / spatial_size;
        size_t spatial_idx = i % spatial_size;
        size_t input_idx = batch_idx * channels * spatial_size + channel_idx * spatial_size + spatial_idx;
        sum += device_cast_to_float(input[input_idx]);
    }
    
    // 块内归约求和
    __shared__ float shared_sum[1024];
    shared_sum[thread_idx] = sum;
    __syncthreads();
    
    for (int stride = block_size / 2; stride > 0; stride /= 2) {
        if (thread_idx < stride) {
            shared_sum[thread_idx] += shared_sum[thread_idx + stride];
        }
        __syncthreads();
    }
    
    float mean = 0.0f;
    if (thread_idx == 0) {
        mean = shared_sum[0] / total_elements;
        workspace_mean[channel_idx] = device_cast_from_float<T>(mean);
    }
    __syncthreads();
    mean = device_cast_to_float(workspace_mean[channel_idx]);
    
    // 计算方差
    float var_sum = 0.0f;
    for (size_t i = thread_idx; i < total_elements; i += block_size) {
        size_t batch_idx = i / spatial_size;
        size_t spatial_idx = i % spatial_size;
        size_t input_idx = batch_idx * channels * spatial_size + channel_idx * spatial_size + spatial_idx;
        float diff = device_cast_to_float(input[input_idx]) - mean;
        var_sum += diff * diff;
    }
    
    // 块内归约求方差
    shared_sum[thread_idx] = var_sum;
    __syncthreads();
    
    for (int stride = block_size / 2; stride > 0; stride /= 2) {
        if (thread_idx < stride) {
            shared_sum[thread_idx] += shared_sum[thread_idx + stride];
        }
        __syncthreads();
    }
    
    float variance = 0.0f;
    if (thread_idx == 0) {
        variance = shared_sum[0] / total_elements;
        workspace_var[channel_idx] = device_cast_from_float<T>(variance);
        
        // 更新running_mean和running_var
        float old_running_mean = device_cast_to_float(running_mean[channel_idx]);
        float old_running_var = device_cast_to_float(running_var[channel_idx]);
        
        float new_running_mean = (1.0f - momentum) * old_running_mean + momentum * mean;
        float new_running_var = (1.0f - momentum) * old_running_var + momentum * variance;
        
        running_mean[channel_idx] = device_cast_from_float<T>(new_running_mean);
        running_var[channel_idx] = device_cast_from_float<T>(new_running_var);
    }
    __syncthreads();
    variance = device_cast_to_float(workspace_var[channel_idx]);
    
    // 归一化和缩放偏移
    float weight_val = device_cast_to_float(weight[channel_idx]);
    float bias_val = device_cast_to_float(bias[channel_idx]);
    float inv_std = 1.0f / sqrtf(variance + eps);
    
    for (size_t i = thread_idx; i < total_elements; i += block_size) {
        size_t batch_idx = i / spatial_size;
        size_t spatial_idx = i % spatial_size;
        size_t input_idx = batch_idx * channels * spatial_size + channel_idx * spatial_size + spatial_idx;
        
        float normalized = (device_cast_to_float(input[input_idx]) - mean) * inv_std;
        float result = normalized * weight_val + bias_val;
        output[input_idx] = device_cast_from_float<T>(result);
    }
}

// 启动核函数的辅助函数
template<typename T>
infiniStatus_t launchBatchNormKernel(
    const BatchNormInfo &info,
    void *output,
    const void *input,
    const void *weight,
    const void *bias,
    void *running_mean,
    void *running_var,
    void *workspace,
    void *stream) {
    
    size_t dtype_size = infiniSizeOf(info.dtype);
    void *workspace_mean = workspace;
    void *workspace_var = static_cast<char*>(workspace) + info.channels * dtype_size;
    
    dim3 grid(info.channels);
    dim3 block(256); // 使用256个线程
    
    batchNormKernel<T><<<grid, block, 0, reinterpret_cast<hcStream_t>(stream)>>>(
        reinterpret_cast<T*>(output),
        reinterpret_cast<const T*>(input),
        reinterpret_cast<const T*>(weight),
        reinterpret_cast<const T*>(bias),
        reinterpret_cast<T*>(running_mean),
        reinterpret_cast<T*>(running_var),
        reinterpret_cast<T*>(workspace_mean),
        reinterpret_cast<T*>(workspace_var),
        info.batch_size, info.channels, info.spatial_size,
        info.momentum, info.eps);
    
    CHECK_METAX(hcGetLastError());
    
    return INFINI_STATUS_SUCCESS;
}

// Descriptor类的create方法实现
infiniStatus_t Descriptor::create(
    infiniopHandle_t handle,
    Descriptor **desc_ptr,
    infiniopTensorDescriptor_t output_desc,
    infiniopTensorDescriptor_t input_desc,
    infiniopTensorDescriptor_t weight_desc,
    infiniopTensorDescriptor_t bias_desc,
    infiniopTensorDescriptor_t running_mean_desc,
    infiniopTensorDescriptor_t running_var_desc,
    float momentum,
    float eps) {
    
    if (!handle || !desc_ptr || !output_desc || !input_desc || 
        !weight_desc || !bias_desc || !running_mean_desc || !running_var_desc) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    if (momentum < 0.0f || momentum > 1.0f || eps <= 0.0f) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    auto dtype = input_desc->dtype();
    
    // 检查数据类型支持
    if (dtype != INFINI_DTYPE_F16 && dtype != INFINI_DTYPE_F32 && dtype != INFINI_DTYPE_BF16) {
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
    
    // 检查数据类型一致性
    if (input_desc->dtype() != output_desc->dtype() ||
        input_desc->dtype() != weight_desc->dtype() ||
        input_desc->dtype() != bias_desc->dtype() ||
        input_desc->dtype() != running_mean_desc->dtype() ||
        input_desc->dtype() != running_var_desc->dtype()) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    // 检查形状兼容性
    if (input_desc->ndim() < 2) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    // 输入和输出形状应该相同
    if (input_desc->ndim() != output_desc->ndim()) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    for (size_t i = 0; i < input_desc->ndim(); ++i) {
        if (input_desc->dim(i) != output_desc->dim(i)) {
            return INFINI_STATUS_BAD_PARAM;
        }
    }
    
    // weight, bias, running_mean, running_var 应该是1D张量，长度为channels
    size_t channels = input_desc->dim(1);
    if (weight_desc->ndim() != 1 || weight_desc->dim(0) != channels ||
        bias_desc->ndim() != 1 || bias_desc->dim(0) != channels ||
        running_mean_desc->ndim() != 1 || running_mean_desc->dim(0) != channels ||
        running_var_desc->ndim() != 1 || running_var_desc->dim(0) != channels) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    // 创建BatchNormInfo
    BatchNormInfo info;
    info.batch_size = input_desc->dim(0);
    info.channels = channels;
    
    // 计算spatial_size
    info.spatial_size = 1;
    for (size_t i = 2; i < input_desc->ndim(); ++i) {
        info.spatial_size *= input_desc->dim(i);
    }
    
    info.input_size = input_desc->numel();
    info.output_size = output_desc->numel();
    info.dtype = dtype;
    info.momentum = momentum;
    info.eps = eps;
    
    // 复制形状和步长信息
    info.input_shape = input_desc->shape();
    info.output_shape = output_desc->shape();
    info.input_strides = input_desc->strides();
    info.output_strides = output_desc->strides();
    info.weight_strides = weight_desc->strides();
    info.bias_strides = bias_desc->strides();
    info.running_mean_strides = running_mean_desc->strides();
    info.running_var_strides = running_var_desc->strides();
    
    // 计算workspace大小
    size_t dtype_size = infiniSizeOf(dtype);
    size_t workspace_size = 2 * channels * dtype_size; // mean + var
    
    *desc_ptr = new Descriptor(
        std::move(info),
        workspace_size,
        handle->device, handle->device_id);
    
    return INFINI_STATUS_SUCCESS;
}

// get_workspace_size方法实现
infiniStatus_t Descriptor::get_workspace_size(size_t *size) const {
    if (!size) {
        return INFINI_STATUS_BAD_PARAM;
    }
    *size = workspace_size;
    return INFINI_STATUS_SUCCESS;
}

// calculate方法实现
infiniStatus_t Descriptor::calculate(
    void *workspace, size_t workspace_size_param,
    void *output,
    const void *input,
    const void *weight,
    const void *bias,
    void *running_mean,
    void *running_var,
    void *stream) const {
    
    if (!output || !input || !weight || !bias || !running_mean || !running_var) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    if (workspace_size_param < workspace_size) {
        return INFINI_STATUS_INSUFFICIENT_WORKSPACE;
    }
    
    switch (info.dtype) {
    case INFINI_DTYPE_F16:
        return batchNormMetax<fp16_t>(info, output, input, weight, bias, 
                                     running_mean, running_var, workspace, stream);
    case INFINI_DTYPE_F32:
        return batchNormMetax<float>(info, output, input, weight, bias, 
                                    running_mean, running_var, workspace, stream);
    case INFINI_DTYPE_BF16:
        return batchNormMetax<bf16_t>(info, output, input, weight, bias, 
                                     running_mean, running_var, workspace, stream);
    default:
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
}

// 模板函数实现
template<typename T>
infiniStatus_t batchNormMetax(
    const BatchNormInfo &info,
    void *output,
    const void *input,
    const void *weight,
    const void *bias,
    void *running_mean,
    void *running_var,
    void *workspace,
    void *stream) {
    
    return launchBatchNormKernel<T>(
        info, output, input, weight, bias,
        running_mean, running_var, workspace, stream);
}

// 显式实例化
template infiniStatus_t batchNormMetax<fp16_t>(
    const BatchNormInfo &info,
    void *output, const void *input, const void *weight, const void *bias,
    void *running_mean, void *running_var, void *workspace, void *stream);

template infiniStatus_t batchNormMetax<float>(
    const BatchNormInfo &info,
    void *output, const void *input, const void *weight, const void *bias,
    void *running_mean, void *running_var, void *workspace, void *stream);

template infiniStatus_t batchNormMetax<bf16_t>(
    const BatchNormInfo &info,
    void *output, const void *input, const void *weight, const void *bias,
    void *running_mean, void *running_var, void *workspace, void *stream);

} // namespace op::batch_norm::metax