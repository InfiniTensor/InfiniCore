
#include "leaky_relu_metax.h"

#include "../../../elementwise/metax/elementwise_metax.h"

#include "../cuda/kernel.cuh"

namespace op::leaky_relu::metax {

// 析构函数，默认实现
Descriptor::~Descriptor() = default;

// 创建leaky_relu算子的描述符
infiniStatus_t Descriptor::create(
    infiniopHandle_t handle_, // 输入句柄
    Descriptor **desc_ptr, // 输出描述符指针
    infiniopTensorDescriptor_t out_desc, // 输出张量描述符
    std::vector<infiniopTensorDescriptor_t> input_desc_vec
) { // 输入张量描述符向量

    // 将句柄转换为 metax 设备句柄
    auto handle = reinterpret_cast<device::metax::Handle *>(handle_);
    // 获取输出张量的数据类型
    auto dtype = out_desc->dtype();

    // 获取输入和输出张量的描述符和形状
    const auto &input_desc = input_desc_vec.at(0);
    const auto &output_shape = out_desc->shape();
    const auto &input_shape = input_desc->shape();

    // 检查数据类型是否支持
    CHECK_DTYPE(dtype, INFINI_DTYPE_F16, INFINI_DTYPE_F32, INFINI_DTYPE_F64, INFINI_DTYPE_BF16);

    // 检查输入输出张量形状是否一致
    CHECK_SAME_SHAPE(output_shape, input_shape);

    // 创建 CUDA 上的 elementwise 描述符
    CREATE_ELEMENTWISE_METAX_DESCRIPTOR(handle, dtype, out_desc, input_desc_vec);

    return INFINI_STATUS_SUCCESS;
}

// 执行leaky_relu计算
infiniStatus_t Descriptor::calculate(
    void *workspace,
    size_t workspace_size,
    void *output,
    std::vector<const void *> inputs,
    float negative_slope,
    void *stream) const {

    // 检查工作空间是否足够
    // if (workspace_size < _workspace_size) {
    //     return INFINI_STATUS_INSUFFICIENT_WORKSPACE;
    // }

    // 根据数据类型选择对应的 CUDA kernel 进行计算
    switch (_dtype) {
    case INFINI_DTYPE_F16:
        return _device_info->calculate<256, cuda::LeakyReluOp, half>(_info, workspace, output, inputs, stream, negative_slope);
    case INFINI_DTYPE_BF16:
        return _device_info->calculate<256, cuda::LeakyReluOp, cuda_bfloat16>(_info, workspace, output, inputs, stream, negative_slope);
    case INFINI_DTYPE_F32:
        return _device_info->calculate<256, cuda::LeakyReluOp, float>(_info, workspace, output, inputs, stream, negative_slope);
    case INFINI_DTYPE_F64:
        return _device_info->calculate<256, cuda::LeakyReluOp, double>(_info, workspace, output, inputs, stream, negative_slope);
    default:
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }

    return INFINI_STATUS_SUCCESS;
}
} // namespace op::leaky_relu::metax

